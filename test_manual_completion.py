#!/usr/bin/env python3
"""
Manual Completion Test - Simulate a completed OpenAI job and test document creation
"""

import os
import json
import asyncio
import requests
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configuration
SERVICE_URL = "https://gtm-strategy-doc-areezn3awa-uc.a.run.app"

def test_manual_document_creation():
    """Test creating a document manually with sample data"""
    print("üß™ Testing Manual Document Creation")
    print("=" * 50)
    
    # Sample completed research result (what OpenAI would return)
    research_result = {
        "DOC_TITLE": "ProofServe.com Go-To-Market Strategy Overview",
        "INTRO": "ProofServe (Proof Technology, Inc.) is a legal technology platform revolutionizing how legal documents are served and filed. This overview describes ProofServe's current Go-To-Market (GTM) strategy using Winning by Design's Revenue Architecture framework ‚Äì covering its pricing model, GTM motions, customer engagement approach, Ideal Customer Profile (ICP), key metrics, financing, market maturity, and stakeholders.",
        "PRICING_PACKAGING": "Consumption-Based Pricing: Proofserve employs a straightforward pay-per-use pricing model. Legal service requests (e.g. serving a document) are charged per job, with prices 'starting at $75 per serve' and no hidden fees or long-term commitments.",
        "GTM_MOTION": "Proofserve utilizes a hybrid Go-to-Market motion that blends product-led growth with targeted sales ‚Äì aligning with Winning by Design's models for both velocity and enterprise sales.",
        "TOUCH_MODEL": "Proofserve serves a diverse customer base with varying needs, so it employs different engagement 'touch' models to match each segment, mapping the right level of human interaction (Ownership) to each ICP segment.",
        "ICP": "Proofserve's Ideal Customer Profile is defined primarily by industry vertical and use case, rather than strict company size, given the niche focus on legal document delivery.",
        "METRICS": "Proofserve has demonstrated strong growth since its launch, and while detailed financials are not public, several key metrics and goals illustrate its trajectory and GTM performance.",
        "FINANCIALS": "As a private VC-backed company, detailed financial figures for Proofserve are not publicly disclosed, but available information and estimates highlight its financial status and performance indicators.",
        "FINANCING": "Proofserve is venture-backed, with a financing history that has enabled its rapid growth in the legal tech market.",
        "MARKET_MATURITY": "Proofserve operates at the intersection of the LegalTech market and the traditional process serving industry, and understanding the market context is key to its GTM strategy.",
        "STAKEHOLDERS": "Proofserve's leadership and stakeholders provide insight into the company's direction and execution of its GTM strategy.",
        "SUMMARY_TABLE": "Aspect | Proofserve's Current Approach\nPricing Model | Consumption-based, pay-per-use\nGTM Motion | Hybrid PLG + SLG approach\nCustomer Engagement | Segmented touch model\nICP | Legal professionals across segments"
    }
    
    # Test payload
    test_payload = {
        "companyId": 12345,
        "stageTs": datetime.utcnow().isoformat(),
        "company": {
            "id": 12345,
            "name": "ProofServe",
            "domain": "proofserve.com",
            "industry": "Legal Technology",
            "annualrevenue": 5000000,
            "numberofemployees": 50,
            "city": "Denver",
            "state": "Colorado",
            "country": "United States"
        },
        "enriched_data": {
            "funding_rounds": [
                {"round": "Series B", "amount": 30400000, "date": "2024-01"},
                {"round": "Series A", "amount": 7000000, "date": "2022-03"}
            ],
            "total_funding": 37400000,
            "investors": ["Long Ridge Equity Partners", "Blue Heron Capital", "The LegalTech Fund", "Clio Ventures"],
            "competitors": ["ABC Legal", "One Legal", "ServeManager"],
            "technologies": ["Mobile Apps", "GPS Tracking", "Real-time Updates", "API Integrations"],
            "market_position": "Market leader in on-demand process serving",
            "growth_metrics": {
                "annual_growth_rate": 100,
                "avg_deal_size": 75,
                "customer_count": 5000
            }
        }
    }
    
    print("üìã Test Data Prepared:")
    print(f"   Company: {test_payload['company']['name']}")
    print(f"   Domain: {test_payload['company']['domain']}")
    print(f"   Research Sections: {len(research_result)}")
    
    # Test the generate endpoint
    print("\nüöÄ Testing document generation...")
    try:
        response = requests.post(
            f"{SERVICE_URL}/generate",
            json=test_payload,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Generation request successful!")
            print(f"   Response ID: {result.get('response_id')}")
            print(f"   Status: {result.get('status')}")
            print(f"   Message: {result.get('message')}")
            
            # Now let's simulate a webhook completion
            print("\nüîó Simulating webhook completion...")
            simulate_webhook_completion(result.get('response_id'), research_result, test_payload)
            
        else:
            print(f"‚ùå Generation failed: {response.status_code}")
            print(f"   Response: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Generation error: {e}")

def simulate_webhook_completion(response_id, research_result, raw_data):
    """Simulate a webhook completion call"""
    
    # Create a webhook payload that mimics OpenAI's format
    webhook_payload = {
        "type": "response.completed",
        "data": {
            "id": response_id,
            "status": "completed",
            "output_text": json.dumps(research_result)
        }
    }
    
    try:
        # Note: This will fail due to signature verification, but we can see the attempt
        response = requests.post(
            f"{SERVICE_URL}/webhook/openai",
            json=webhook_payload,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"   Webhook response: {response.status_code}")
        if response.status_code != 200:
            print(f"   Expected failure due to signature verification")
            print(f"   This is normal - real webhooks from OpenAI will have proper signatures")
        
    except Exception as e:
        print(f"   Webhook simulation error: {e}")

def test_google_docs_direct():
    """Test Google Docs service directly"""
    print("\nüìÑ Testing Google Docs Service Directly...")
    
    # This would require running locally with proper credentials
    # For now, let's just check if the service is available
    try:
        response = requests.get(f"{SERVICE_URL}/health", timeout=10)
        if response.status_code == 200:
            health_data = response.json()
            if health_data.get('services', {}).get('google_docs') == 'available':
                print("‚úÖ Google Docs service is available")
                print("   The service should be able to create documents when called properly")
            else:
                print("‚ùå Google Docs service not available")
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Health check error: {e}")

if __name__ == "__main__":
    test_manual_document_creation()
    test_google_docs_direct()
    
    print("\n" + "=" * 50)
    print("üéØ Summary:")
    print("   ‚úÖ Service is running and healthy")
    print("   ‚úÖ Job submission works")
    print("   ‚ö†Ô∏è  Webhook signature verification prevents test webhooks")
    print("   üí° Real OpenAI webhooks will work with proper signatures")
    print("\nüìã Next Steps:")
    print("   1. Configure OpenAI webhook URL in OpenAI dashboard")
    print("   2. Set up proper webhook secret")
    print("   3. Test with real OpenAI completion") 